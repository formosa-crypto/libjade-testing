require "../src/dilithium3/packing.jazz"

//void pack_t1_jazz(uint32_t p[N], uint8_t buf[POLYT1_PACKEDBYTES]);
export
fn pack_t1_jazz(reg u64 poly_ptr, reg u64 buf_ptr)
{
	reg u32 val;
	stack u32[Li2_polydeg] t1;
	stack u8[Li2_pack_t1len] buf;
	reg u64 i;
	reg u8 c;

	//load
	i = 0;
	while(i < Li2_polydeg) {
		val = (u32)[poly_ptr + 4 * i];
		t1[(int) i] = val;
		i += 1;
	}

	buf = polyt1_pack(t1, buf);

	//save
	i = 0;
	while(i < Li2_pack_t1len)
	{
		c = buf[(int) i];
		(u8)[buf_ptr + i] = c;
		i += 1;
	}
}

//void unpack_t1_jazz(int32_t t1[N], uint8_t buf[POLYT1_PACKEDBYTES]);
export
fn unpack_t1_jazz(reg u64 t1_ptr, reg u64 buf_ptr) {
	stack u32[Li2_polydeg] t1;
	stack u8[Li2_pack_t1len] buf;
	reg u8 byte;
	reg u32 coeff;
	reg u64 i;

	//load
	i = 0;
	while (i < Li2_pack_t1len) {
		byte = (u8)[buf_ptr + i];
		buf[(int) i] = byte;
		i += 1;
	}

	t1 = polyt1_unpack(t1, buf);

	//save
	i = 0;
	while (i < Li2_polydeg) {
		coeff = t1[(int) i];
		(u32)[t1_ptr + 4 * i] = coeff;
		i += 1;
	}
}

export
fn polyz_unpack_jazz(reg u64 rp, reg u64 ap) {
	stack u32[Li2_polydeg] r;
	stack u8[Li2_pack_zlen] a;
	reg u8 c;
	reg u32 v;

	inline int i;

	for i = 0 to Li2_pack_zlen {
		c = (u8) [ap + i];
		a[i] = c;
	}

	r = polyz_unpack(r, a);

	for i = 0 to Li2_polydeg {
		v = r[i];
		(u32) [rp + 4 * i] = v;
	}
}

export
fn polyz_pack_jazz(reg u64 rp, reg u64 ap) {
	stack u8[Li2_pack_zlen] r;
	stack u32[Li2_polydeg] a;
	reg u8 c;
	reg u32 v;

	inline int i;

	for i = 0 to Li2_polydeg {
		v = (u32) [ap + 4 * i];
		a[i] = v;
	}

	r = polyz_pack(r, a);

	for i = 0 to Li2_pack_zlen {
		c = r[i];
		(u8) [rp + i] = c;
	}

}

export
fn polyeta_unpack_jazz(reg u64 rp, reg u64 ap) {
	stack u32[Li2_polydeg] r;
	stack u8[Li2_pack_etalen] a;
	reg u8 c;
	reg u32 v;
	inline int i;

	for i = 0 to Li2_pack_etalen {
		c = (u8) [ap + i];
		a[i] = c;
	}

	r = polyeta_unpack(r, a);

	for i = 0 to Li2_polydeg {
		v = r[i];
		(u32) [rp + 4 * i] = v;
	}
}

export
fn polyt0_unpack_jazz(reg u64 p_t0, reg u64 p_src) {
	stack u32[Li2_polydeg] t0;
	stack u8[Li2_pack_t0len] src;
	inline int i;
	reg u8 c;
	reg u32 v;

	for i = 0 to Li2_pack_t0len {
		c = (u8) [p_src + i];
		src[i] = c;
	}

	t0 = polyt0_unpack(t0, src);

	for i = 0 to Li2_polydeg {
		v = t0[i];
		(u32) [p_t0 + 4 * i] = v;
	}
}

export
fn pack_signature_jazz(reg u64 p_ctilde, reg u64 pz, reg u64 ph, reg u64 psign) {
	stack u8[32] c_tilde;
	stack u32[Li2_l * Li2_polydeg] z;
	stack u32[Li2_k * Li2_polydeg] h;
	stack u8[Li2_SIGN_LEN] signature;
	reg u8 c;
	reg u32 v;

	inline int i;

	for i = 0 to 32 {
		c = (u8)[p_ctilde + i];
		c_tilde[i] = c;
	}

	for i = 0 to Li2_l * Li2_polydeg {
		v = (u32) [pz + 4 * i];
		z[i] = v;
	}

	for i = 0 to Li2_k * Li2_polydeg {
		v = (u32) [ph + 4 * i];
		h[i] = v;
	}

	signature = pack_signature(c_tilde, z, h);

	for i = 0 to Li2_SIGN_LEN {
		c = signature[i];
		(u8)[psign + i] = c;
	}
}
