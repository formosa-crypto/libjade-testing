require "../common/fips202.jazz"
require "../common/montgomery.jazz"
require "../common/poly.jazz"
require "packing.jazz"
require "rounding.jazz"
require "variant_params.jazz"

inline
fn expandMaskComponent(reg ptr u32[Li2_polydeg] f, reg ptr u8[64] rho_prime, stack u16 kappa)
	-> reg ptr u32[Li2_polydeg]
{
	reg u64 i;
	reg u8 c;
	reg u16 v;
	stack u64[25] state;
	stack u8[(Li2_pack_zlen / SHAKE256_RATE) * SHAKE256_RATE + SHAKE256_RATE] y_packed;
	stack u64 y_loc;
	stack u64 output_squeeze_counter;
	reg u64 addr;

	//there's an argument to call shake256_absorb66
	//that however introduces an extra copy

	state = st0(state);
	i = 0;
	while(i < 64) {
		c = rho_prime[(int) i];
		state[u8 (int) i] = c;
		i += 1;
	}

	v = kappa;
	v &= 255;
	c = (8u) v;
	state[u8 64] = c;

	v = kappa;
	v >>= 8;
	c = (8u) v;
	state[u8 65] = c;
	state[u8 66] ^= 0x1f;
	state[u8 SHAKE256_RATE - 1] ^= 0x80;

	y_loc = 0;

	output_squeeze_counter = 0;
	while(output_squeeze_counter < (Li2_pack_zlen / SHAKE256_RATE + 1)) {
		state = __keccakf1600_ref(state);

		i = 0;
		while(i < SHAKE256_RATE) {
			addr = i;
			c = state[u8 (int) addr];
			addr = y_loc;
			y_packed[(int) addr] = c;
			y_loc += 1;
			i += 1;
		}

		output_squeeze_counter += 1;
	}

	f = polyz_unpack(f, y_packed[0 : Li2_pack_zlen]);

	return f;
}

inline
fn poly_make_hint(reg ptr u32[Li2_polydeg] f0 f1 hints)
	-> stack u32, reg ptr u32[Li2_polydeg]
{
	stack u32 weight;
	reg u64 i;
	reg u32 a0 a1;
	reg u32 h;

	i = 0;
	while(i < Li2_polydeg) {
		hints[(int) i] = 0;
		i += 1;
	}

	weight = 0;
	i = 0;
	while(i < Li2_polydeg) {
		a0 = f0[(int) i];
		a1 = f1[(int) i];
		h = make_hint(a0, a1);
		hints[(int) i] = h;
		weight += h;
		i += 1;
	}

	return weight, hints;
}

fn poly_use_hint(reg ptr u32[Li2_polydeg] w1 hints)
	-> reg ptr u32[Li2_polydeg]
{
	reg u64 i;
	reg u32 a h;

	i = 0;
	while (i < Li2_polydeg) {
		h = hints[(int) i];
		a = w1[(int) i];
		a = use_hint(a, h);
		w1[(int) i] = a;
		i += 1;
	}
	return w1;
}