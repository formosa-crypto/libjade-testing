require "../common/expandMask.jazz"
require "../common/expandS.jazz"
require "../common/fips202.jazz"
require "../common/poly.jazz"

require "params.jazz"
require "rounding.jazz"
require "packing.jazz"

inline
fn expandMask_poly(reg ptr u32[Li2_polydeg] f, reg ptr u8[64] rho_prime, stack u16 kappa)
	-> reg ptr u32[Li2_polydeg] {
	f = expandMask_poly_gamma1_217(f, rho_prime, kappa);
	return f;
}

inline
fn expandS_poly(stack u8[64] rho_prime, reg u16 elem_idx, reg ptr u32[Li2_polydeg] buf)
	-> reg ptr u32[Li2_polydeg] {
    buf = expandSEta2_poly(rho_prime, elem_idx, buf);
	return buf;
}

require "../common/expandA_end.jazz"
require "../common/expandS_end.jazz"
require "../common/hashing_end.jazz"
require "../common/poly_end.jazz"
require "../common/polyvec_end.jazz"
require "../common/expandMask_end.jazz"