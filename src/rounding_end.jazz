// high bits = a0, low bits = a1
fn decompose_gamma2_88(reg u32 a) -> reg u32, reg u32 {
	reg u64 a0;
	reg u32 a0_32;
	reg u32 a1;
	reg u32 v;
	reg u64 v64;

	// a1  = (a + 127) >> 7;
	a1 = a;
	a1 += 127;
	a1 >>= 7;

	// a1  = (a1*11275 + (1 << 23)) >> 24;
	a1 *= 11275;
	a1 += 1 << 23;
	a1 >>= 24;

	// a1 ^= ((43 - a1) >> 31) & a1;
	v = 43;
	v -= a1;
	v >>= 31;
	v &= a1;
	a1 ^= v;

	// *a0  = a - a1*2*GAMMA2;
	v64 = (64u) a1;
	v64 *= 2 * Li2_gamma2;
	a0 = (64u) a;
	a0 -= v64;

	// *a0 -= (((Q-1)/2 - *a0) >> 31) & Q;
	v64 = (Li2_q - 1) / 2;
	v64 -= a0;
	v64 >>= 31;
	v64 &= Li2_q;
	a0 -= v64;

	a0_32 = (32u) a0;
	return a0_32, a1;
}

// high bits = a0, low bits = a1
fn decompose_gamma2_32(reg u32 a) -> reg u32, reg u32 {
	reg u64 a0;
	reg u32 a0_32;
	reg u32 a1;
	reg u32 v;
	reg u64 v64;

	// a1  = (a + 127) >> 7;
	a1 = a;
	a1 += 127;
	a1 >>= 7;

	// a1  = (a1*1025 + (1 << 21)) >> 22;
	v = a1;
	a1 <<= 10;
	a1 += v;
	a1 += (int) (1 << 21);
	a1 >>= 22;

	// a1 &= 15;
	a1 &= 15;

	// *a0  = a - a1*2*GAMMA2;
	v64 = (64u) a1;
	v64 *= 2 * Li2_gamma2;
	a0 = (64u) a;
	a0 -= v64;

	// *a0 -= (((Q-1)/2 - *a0) >> 31) & Q;
	v64 = (Li2_q - 1) / 2;
	v64 -= a0;
	v64 >>= 31;
	v64 &= Li2_q;
	a0 -= v64;

	a0_32 = (32u) a0;
	return a0_32, a1;
}
